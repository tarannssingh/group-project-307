import express from "express";
import cors from "cors"
import bcrypt from 'bcrypt';
import user from "./user-services.js";
import Credential from "./user.js";
import { validationResult } from "express-validator";


const app = express();
const port = 5478;


app.use(express.json());
app.use(cors());

app.get("/", (req, res) => {
    res.send("hi")
}) 

// app.post("/signup", signupValidators, async (req, res) => {
//     // const errors = validationResult(req)
//     // if (!errors.isEmpty()) {
//     //     return res.status(400).json({ errors: errors.array()})
//     // } 
//     // if 
//     // let promise = await user.signup(req.body.email, req.body.password)

// })



//MongoDB connection
// const mongoURI = 'mongodb+srv://admin:WB8kHNmtJGNx8J1F@307-cluster.dvtn5.mongodb.net/?retryWrites=true&w=majority&appName=307-cluster'; // Replace with MongoDB connection string
// mongoose.connect(mongoURI, { useNewUrlParser: true, useUnifiedTopology: true })
//     .then(() => console.log('MongoDB connected'))
//     .catch(err => console.log('MongoDB connection error:', err));



//POST /api/credential endpoint -- accept username, website and password
app.post('/api/credential', async(req, res) =>{
    const { username, password, website} = req.body;

    if ( !username || !website || !password){
        return res.status(400).json({error: "Username, password and website are required"})
    }

    //encrypt the password
    const hashedPassword = await bcrypt.hash(password, 10);

    //save the credential
    const credential = new Credential ({username, website, password: hashedPassword});

   // Save the credential to the database
   try {
    await credential.save();
    res.status(201).json({ message: "Credential stored successfully", id: credential._id }); //_id automatically generated by MongoDB
} catch (error) {
    res.status(500).json({ error: "Error saving credential" });
}
})

//for sprint 3
//PUT /api/credentials/:id ---allows updating username, website and password
//app.put('/api/credentials/:id')



//DELETE /api/credentials/:id ---deletes a credential by ID
app.delete('/api/credentials/:id', async(req,res) =>{
    const { id } = req.params;

    try {
        // Attempt to delete the credential by ID
        const deletedCredential = await Credential.findByIdAndDelete(id);

        // if not found
        if (!deletedCredential) {
            return res.status(404).json({ error: "Credential not found" });
        }

        // Respond with a success message
        res.status(200).json({ message: "Credential deleted successfully" });
    } 
    catch (error) {
        // Handle any errors during the delete process
        res.status(500).json({ error: "Error deleting credential" });
    }
});


// GET /api/credentials ---Retrieve ALL credentials, including passwords
app.get('/api/credentials', async (req, res) => {
   try{
        const credentials = await Credential.find();
        res.status(200).json(credentials);
   } catch (error)
   {
    res.status(500).json({ error: "Error retrieving credentials" });
   }
});

// GET /api/credentials/:id ---Retrieve a specific credential, including password
app.get('/api/credentials/:id', (req, res) => {
    const credential = credentials.find(c => c.id === parseInt(req.params.id));
    
    if (!credential) {
        return res.status(404).json({ error: "Credential not found" });
    }

    res.status(200).json(credential);
});

//GET /api/credentials/search? ---Find credentials based on a website serch
app.get('/api/credentials/search', async (req, res) => {
    const { website } = req.query; // Get the website from query parameters

        try {
            const credentials = await Credential.find({ website: { $regex: website, $options: 'i' } }); // Case-insensitive search
            res.status(200).json(credentials);
        } catch (error) {
            res.status(500).json({ error: "Error searching for credentials" });
        }
});


app.listen(port, () => {
    console.log(`Piggy Pass @ localhost:${port}`)
})

